name: Build Yocto

on:
  workflow_call:
    outputs:
      artifacts_url:
        description: "URL to retrieve build artifacts"
        value: ${{ jobs.create-output.outputs.url }}

env:
  CACHE_DIR: /efs/qli/meta-qcom
  KAS_REPO_REF_DIR: /efs/qli/meta-qcom/kas-mirrors
  KAS_CONTAINER: /efs/qli/meta-qcom/kas-mirrors/kas-container

jobs:
  kas-setup:
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    steps:
      - name: Update kas-container
        run: |
          LATEST=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/siemens/kas | tail -n1 | sed 's/.*\///')
          wget -qO ${KAS_CONTAINER} https://raw.githubusercontent.com/siemens/kas/refs/tags/$LATEST/kas-container
          chmod +x ${KAS_CONTAINER}

      - name: Update kas mirrors
        run: |
          for r in $(find ${KAS_REPO_REF_DIR}/* -maxdepth 0 -type d); do
            echo "pre-fetch: $r"
            git -C $r fetch --prune origin '+refs/*:refs/*'
          done

      - uses: actions/checkout@v4

      - name: Run kas lock
        run: |
          ${KAS_CONTAINER} lock --update ci/base.yml:ci/qcom-distro.yml

      - uses: actions/upload-artifact@v4
        with:
          name: kas-lock
          path: ci/*.lock.yml

  yocto-run-checks:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/meta-qcom'
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: Run yocto-check-layer
        run: |
          ci/kas-container-shell-helper.sh ci/yocto-check-layer.sh

      - name: Run Yocto patchreview
        run: |
          ci/kas-container-shell-helper.sh ci/yocto-patchreview.sh

  compile:
    needs: kas-setup
    if: github.repository == 'qualcomm-linux/meta-qcom'
    outputs:
      url: ${{ steps.upload_artifacts.outputs.url }}
    strategy:
      fail-fast: true
      matrix:
        machine:
          - qcm6490-idp
          - qcs615-adp-air
          - qcs6490-rb3gen2-core-kit
          - qcs8300-ride-sx
          - qcs9075-iq-9075-evk
          - qcs9100-ride-sx
          - qrb2210-rb1-core-kit
          - qcom-armv8a
          - qcom-armv7a
        distro:
          - name: poky-altcfg
            yamlfile: ""
          - name: qcom-distro
            yamlfile: ':ci/qcom-distro.yml'
        kernel:
          - type: default
            dirname: ""
            yamlfile: ""
        include:
          # Additional builds for specific machines
          - machine: qcom-armv8a
            distro:
                name: qcom-distro
                yamlfile: ':ci/qcom-distro.yml'
            kernel:
                type: additional
                dirname: "+linux-yocto-dev"
                yamlfile: ":ci/linux-yocto-dev.yml"
    runs-on: [self-hosted, qcom-u2404, amd64-ssd]
    name: ${{ matrix.machine }}/${{ matrix.distro.name }}${{ matrix.kernel.dirname }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: kas-lock
          path: ci/

      - name: OE sstate-cache and downloads
        run: |
          # use a monthly sstate cache folder
          # keep current and last month to allow smooth end of month transition
          rm -rf ${CACHE_DIR}/sstate-cache-$(date -d '2 months ago' '+%Y-%m')
          echo "DL_DIR=${CACHE_DIR}/downloads" >> $GITHUB_ENV
          echo "SSTATE_DIR=${CACHE_DIR}/sstate-cache-$(date '+%Y-%m')" >> $GITHUB_ENV

      - name: Kas build
        run: |
          export KAS_WORK_DIR=$PWD/../kas
          mkdir $KAS_WORK_DIR
          ${KAS_CONTAINER} dump --resolve-env --resolve-local --resolve-refs \
              ci/mirror.yml:ci/${{ matrix.machine }}.yml${{ matrix.distro.yamlfile }}${{ matrix.kernel.yamlfile }} > kas-build.yml
          ${KAS_CONTAINER} build ci/mirror.yml:ci/${{ matrix.machine }}.yml${{ matrix.distro.yamlfile }}${{ matrix.kernel.yamlfile }}
          ci/kas-container-shell-helper.sh ci/yocto-pybootchartgui.sh
          mv $KAS_WORK_DIR/build/buildchart.svg .

          if [ "${{ matrix.machine }}" = "qcom-armv8a" ]; then
            ${KAS_CONTAINER} build ci/mirror.yml:ci/${{ matrix.machine }}.yml${{ matrix.distro.yamlfile }}${{ matrix.kernel.yamlfile }}:ci/initramfs-test.yml
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: buildchart-${{ matrix.distro.name }}${{ matrix.kernel.dirname }}-${{ matrix.machine }}
          path: buildchart.svg

      - uses: actions/upload-artifact@v4
        with:
          name: kas-build-${{ matrix.distro.name }}${{ matrix.kernel.dirname }}-${{ matrix.machine }}
          path: kas-build.yml

      - name: Stage build artifacts for publishing
        run: |
          # The upload-private-artifact-action runs from a container that
          # expects file to be relative to our PWD. deploy_dir is outside
          # that, so we move things around:
          deploy_dir=../kas/build/tmp/deploy/images/${{matrix.machine}}
          uploads_dir=./uploads/${{ matrix.distro.name }}${{ matrix.kernel.dirname }}/${{ matrix.machine }}
          mkdir -p $uploads_dir
          find $deploy_dir/ -maxdepth 1 -type f -exec cp {} $uploads_dir/ \;
          find $deploy_dir/ -maxdepth 1 -type l \( -name boot-*.img -o -name *.rootfs.ext4.gz -o -name *.rootfs.qcomflash.tar.gz \) -exec cp -d {} $uploads_dir/ \;
          cp buildchart.svg kas-build.yml $uploads_dir/

      - name: Upload private artifacts
        uses: qualcomm-linux/upload-private-artifact-action@v1
        id: upload_artifacts
        with:
          path: ./uploads

  create-output:
    needs: compile
    outputs:
      url: ${{ steps.print-output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: "Print output"
        id: print-output
        env:
          build_url: ${{ needs.compile.outputs.url }}
        run: |
          echo "Downloads URL: ${build_url}"
          echo "url=\"${build_url}\"" >> $GITHUB_OUTPUT
          echo "${build_url}" > build_url
          echo "## Download URL" >> $GITHUB_STEP_SUMMARY
          echo "[${build_url}](${build_url})" >> $GITHUB_STEP_SUMMARY
      - name: Upload build URL
        uses: actions/upload-artifact@v4
        with:
          name: build_url
          path: build_url
