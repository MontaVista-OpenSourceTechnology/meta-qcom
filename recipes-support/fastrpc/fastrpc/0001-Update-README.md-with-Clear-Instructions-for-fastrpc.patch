From 2dc5654bacd10c3a2bde66b7adb7942b26f4ec2a Mon Sep 17 00:00:00 2001
From: Ekansh Gupta <ekansh.gupta@oss.qualcomm.com>
Date: Tue, 19 Aug 2025 09:46:06 +0530
Subject: [PATCH] Update README.md with Clear Instructions for fastrpc_test

Updated README.md with clear instructions for pushing files and
running fastrpc_test on Linux and Android.

Signed-off-by: Vinayak Katoch <quic_vkatoch@quicinc.com>
Signed-off-by: Ekansh Gupta <ekansh.gupta@oss.qualcomm.com>
Upstream-Status: Submitted [https://github.com/qualcomm/fastrpc/pull/194/commits/5065fad3f0ceaeffabcb526185a9f5325235f42a]
---
 test/Makefile.am    |  4 +++-
 test/README.md      | 33 +++++++++++++++++----------------
 test/fastrpc_test.c | 42 +++++++++++++++++++++++-------------------
 3 files changed, 43 insertions(+), 36 deletions(-)

diff --git a/test/Makefile.am b/test/Makefile.am
index 9d37214..50d6c15 100644
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -5,7 +5,9 @@ bin_PROGRAMS = fastrpc_test
 fastrpc_test_SOURCES = fastrpc_test.c
 
 # Define the compiler flags for the test program
-fastrpc_test_CFLAGS = -I$(top_srcdir)/inc -DUSE_SYSLOG
+fastrpc_test_CFLAGS = -I$(top_srcdir)/inc -DUSE_SYSLOG \
+                      -Dtestlibdir=\"$(testlibdir)\" \
+                      -Dtestdspdir=\"$(testdspdir)\"
 
 if ANDROID_CC
 USE_LOG = -llog
diff --git a/test/README.md b/test/README.md
index dbe045e..ac5541f 100644
--- a/test/README.md
+++ b/test/README.md
@@ -7,33 +7,34 @@ This folder contains a test application (`fastrpc_test.c`) that demonstrates the
 After building the application, the following files and directories need to be pushed to the device:
 
 1. **fastrpc_test Binary**: The compiled test application.
-2. **android Directory**: Contains shared libraries for the Android platform.
-3. **linux Directory**: Contains shared libraries for the Linux platform.
+2. **linux Directory**: Contains shared libraries for the Linux platform.
+3. **android Directory**: Contains shared libraries for the Android platform.
 4. **v68 Directory**: Contains skeletons for the v68 architecture version.
 5. **v75 Directory**: Contains skeletons for the v75 architecture version.
 
-Copy the following files and directories to `/usr/bin` on the target device:
+### For Linux
 
-- `/path/to/your/fastrpc/test/.libs/fastrpc_test`
-- `/path/to/your/fastrpc/test/android` (if using Android)
-- `/path/to/your/fastrpc/test/linux` (if using Linux)
-- `/path/to/your/fastrpc/test/v68`
-- `/path/to/your/fastrpc/test/v75`
+Use `make install` to install the libraries and the executable to the appropriate directories:
 
-**Note**: Push the `android` directory if you are using the Android platform, and the `linux` directory if you are using the Linux platform.
+```bash
+make install
+```
 
-## Running the Test
+### For Android
 
-To run the test application, follow these steps:
+Copy the following files and directories to a custom path, e.g., `/vendor/bin/`, on the target device:
 
-1. Navigate to the `/usr/bin` directory on the device.
-2. Execute the `fastrpc_test` binary with the appropriate options.
+- `/path/to/your/fastrpc/test/fastrpc_test`
+- `/path/to/your/fastrpc/test/android`
+- `/path/to/your/fastrpc/test/v68`
+- `/path/to/your/fastrpc/test/v75`
+
+## Running the Test
 
-Example command:
+To run the test application, use the following command:
 
 ```bash
-cd /usr/bin
-./fastrpc_test -d 3 -U 1 -t linux -a v68
+fastrpc_test -d 3 -U 1 -t linux -a v68
 ```
 
 ### Options
diff --git a/test/fastrpc_test.c b/test/fastrpc_test.c
index 9edd8ab..46f986f 100644
--- a/test/fastrpc_test.c
+++ b/test/fastrpc_test.c
@@ -39,7 +39,6 @@ int main(int argc, char *argv[]) {
     bool is_unsignedpd_enabled = true;  // Default to unsigned PD
     const char *target = "linux";  // Default target platform
     const char *arch_version = "v68";  // Default architecture version
-    char abs_lib_path[PATH_MAX];
     char ld_lib_path[PATH_MAX];
     char dsp_lib_path[PATH_MAX];
     DIR *dir;
@@ -75,44 +74,49 @@ int main(int argc, char *argv[]) {
         }
     }
 
-    // Construct the absolute library path
-    snprintf(abs_lib_path, sizeof(abs_lib_path), "%s", target);
-
-    if (realpath(abs_lib_path, abs_lib_path) == NULL) {
-        fprintf(stderr, "Error resolving path %s: %s\n", abs_lib_path, strerror(errno));
-        return -1;
+    // Construct the library paths
+    if (strcmp(target, "linux") == 0) {
+        snprintf(ld_lib_path, sizeof(ld_lib_path), "%s", testlibdir);
+        snprintf(dsp_lib_path, sizeof(dsp_lib_path), "%s/%s", testdspdir, arch_version);
+    } else if(strcmp(target, "android") == 0) {
+        snprintf(ld_lib_path, sizeof(ld_lib_path), "%s", target);
+        if (realpath(ld_lib_path, ld_lib_path) == NULL) {
+            fprintf(stderr, "Error resolvingEKAN path %s: %s\n", ld_lib_path, strerror(errno));
+            return -1;
+        }
+        snprintf(dsp_lib_path, sizeof(dsp_lib_path), "%s", arch_version);
+        if (realpath(dsp_lib_path, dsp_lib_path) == NULL) {
+            fprintf(stderr, "Error resolvingEKAN path %s: %s\n", dsp_lib_path, strerror(errno));
+            return -1;
+        }
     }
-
-    // Construct the absolute DSP library path
-    snprintf(dsp_lib_path, sizeof(dsp_lib_path), "%s", arch_version);
-
-    if (realpath(dsp_lib_path, dsp_lib_path) == NULL) {
-        fprintf(stderr, "Error resolving path %s: %s\n", dsp_lib_path, strerror(errno));
+    else {
+        printf("\nERROR: Invalid target platform (-t). Must be linux or android.\n");
+        print_usage();
         return -1;
     }
 
-    // Construct LD_LIBRARY_PATH and DSP_LIBRARY_PATH
-    snprintf(ld_lib_path, sizeof(ld_lib_path), "%s", abs_lib_path);
-
+    // Set the new LD_LIBRARY_PATH
     if (setenv("LD_LIBRARY_PATH", ld_lib_path, 1) != 0) {
         fprintf(stderr, "Error setting LD_LIBRARY_PATH: %s\n", strerror(errno));
         return -1;
     }
 
+    // Set the new DSP_LIBRARY_PATH
     if (setenv("DSP_LIBRARY_PATH", dsp_lib_path, 1) != 0) {
         fprintf(stderr, "Error setting DSP_LIBRARY_PATH: %s\n", strerror(errno));
         return -1;
     }
 
-    dir = opendir(abs_lib_path);
+    dir = opendir(ld_lib_path);
     if (!dir) {
-        fprintf(stderr, "Error opening directory %s: %s\n", abs_lib_path, strerror(errno));
+        fprintf(stderr, "Error opening directory %s: %s\n", ld_lib_path, strerror(errno));
         return -1;
     }
 
     while ((entry = readdir(dir)) != NULL) {
         if (entry->d_type == DT_REG && strstr(entry->d_name, ".so")) {
-            snprintf(full_lib_path, sizeof(full_lib_path), "%s/%s", abs_lib_path, entry->d_name);
+            snprintf(full_lib_path, sizeof(full_lib_path), "%s/%s", ld_lib_path, entry->d_name);
 
             lib_handle = dlopen(full_lib_path, RTLD_LAZY);
             if (!lib_handle) {
-- 
2.34.1

